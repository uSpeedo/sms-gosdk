// Code is generated by um-model, DO NOT EDIT IT.

package usms

import (
	"github.com/uSpeedo/usms-sdk-go/um/request"
	"github.com/uSpeedo/usms-sdk-go/um/response"
)

// USMS API Schema

// CreateUSMSTemplateRequest is request schema for CreateUSMSTemplate action
type CreateUSMSTemplateRequest struct {
	request.CommonBase

	// [PublicParam] Project ID。
	AccountId *int `required:"true"`

	// Template variable property description
	Instruction *string `required:"false"`

	// SMS template usage types：1-verification Code；2-Notification；3-Market；
	Purpose *int `required:"true"`

	// SMS template application reason explanation
	Remark *string `required:"false"`

	// Text message template content，
	// instructions are as follows: the number of words should not exceed 500, and each symbol, English, array, etc.
	// is counted as one word; the format of filling in the variables in the template: {N}, where N is an integer greater than 1, and when there are multiple parameters, it is recommended that N starts from 1 in order, for example: {1}, {2}, etc.;
	// the SMS template prohibits the case of including only variables.
	Template *string `required:"true"`

	// SMS template name，No more than 32 characters, each symbol, English, number, etc. is counted as 1 character.
	TemplateName *string `required:"true"`
}

// CreateUSMSTemplateResponse is response schema for CreateUSMSTemplate action
type CreateUSMSTemplateResponse struct {
	response.CommonBase

	// Error description when error occurs
	Message string

	// SMS template ID (work order ID)
	TemplateId string
}

// NewCreateUSMSTemplateRequest will create request of CreateUSMSTemplate action.
func (c *USMSClient) NewCreateUSMSTemplateRequest() *CreateUSMSTemplateRequest {
	req := &CreateUSMSTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: CreateUSMSTemplate
*/
func (c *USMSClient) CreateUSMSTemplate(req *CreateUSMSTemplateRequest) (*CreateUSMSTemplateResponse, error) {
	var err error
	var res CreateUSMSTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("CreateUSMSTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// DeleteUSMSTemplateRequest is request schema for DeleteUSMSTemplate action
type DeleteUSMSTemplateRequest struct {
	request.CommonBase

	// [PublicParam] Project ID。
	AccountId *int `required:"true"`

	// Template ID (work order ID)，Support as an array, for example，以TemplateIds.0、TemplateIds.1...TemplateIds.N
	TemplateIds []string `required:"true"`
}

// DeleteUSMSTemplateResponse is response schema for DeleteUSMSTemplate action
type DeleteUSMSTemplateResponse struct {
	response.CommonBase

	// Error description when error occurs
	Message string
}

// NewDeleteUSMSTemplateRequest will create request of DeleteUSMSTemplate action.
func (c *USMSClient) NewDeleteUSMSTemplateRequest() *DeleteUSMSTemplateRequest {
	req := &DeleteUSMSTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: DeleteUSMSTemplate
*/
func (c *USMSClient) DeleteUSMSTemplate(req *DeleteUSMSTemplateRequest) (*DeleteUSMSTemplateResponse, error) {
	var err error
	var res DeleteUSMSTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("DeleteUSMSTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// GetUSMSSendReceiptRequest is request schema for GetUSMSSendReceipt action
type GetUSMSSendReceiptRequest struct {
	request.CommonBase

	// [PublicParam] Project ID。
	AccountId *int `required:"true"`

	// The set of SessionNo returned when sending SMS，SessionNoSet.0,SessionNoSet.1....Style，The number of collections in a single call should be limited to 100
	SessionNoSet []string `required:"true"`
}

// GetUSMSSendReceiptResponse is response schema for GetUSMSSendReceipt action
type GetUSMSSendReceiptResponse struct {
	response.CommonBase

	// Collection of return information
	Data []ReceiptPerSession

	// Error description when error occurs
	Message string
}

// NewGetUSMSSendReceiptRequest will create request of GetUSMSSendReceipt action.
func (c *USMSClient) NewGetUSMSSendReceiptRequest() *GetUSMSSendReceiptRequest {
	req := &GetUSMSSendReceiptRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: GetUSMSSendReceipt
*/
func (c *USMSClient) GetUSMSSendReceipt(req *GetUSMSSendReceiptRequest) (*GetUSMSSendReceiptResponse, error) {
	var err error
	var res GetUSMSSendReceiptResponse

	reqCopier := *req

	err = c.Client.InvokeAction("GetUSMSSendReceipt", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// QueryUSMSTemplateRequest is request schema for QueryUSMSTemplate action
type QueryUSMSTemplateRequest struct {
	request.CommonBase

	// [PublicParam] Project ID。
	AccountId *int `required:"true"`

	// Template ID
	TemplateId *string `required:"true"`
}

// QueryUSMSTemplateResponse is response schema for QueryUSMSTemplate action
type QueryUSMSTemplateResponse struct {
	response.CommonBase

	// SMS template detail information，Field descriptions are detailed in:OutTemplate
	Data OutTemplate

	// Error description when error occurs
	Message string
}

// NewQueryUSMSTemplateRequest will create request of QueryUSMSTemplate action.
func (c *USMSClient) NewQueryUSMSTemplateRequest() *QueryUSMSTemplateRequest {
	req := &QueryUSMSTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: QueryUSMSTemplate
*/
func (c *USMSClient) QueryUSMSTemplate(req *QueryUSMSTemplateRequest) (*QueryUSMSTemplateResponse, error) {
	var err error
	var res QueryUSMSTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("QueryUSMSTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// SendBatchUSMSMessageRequest is request schema for SendBatchUSMSMessage action
type SendBatchUSMSMessageRequest struct {
	request.CommonBase

	// [PublicParam] Project ID。
	AccountId *int `required:"true"`

	// Batch Send
	Target *SendBatchInfo `required:"true"`
}

// SendBatchUSMSMessageResponse is response schema for SendBatchUSMSMessage action
type SendBatchUSMSMessageResponse struct {
	response.CommonBase

	// Details of unsuccessful transmission, the field is valid when the return code is non-zero, and the data can be resent according to this field
	FailContent []BatchInfo

	// Error description when error occurs
	Message string

	// 本次请求Uuid
	ReqUuid string

	// The unique ID of this submitted sending task. Note: This field is returned only when the number of successfully submitted SMS is greater than 0
	SessionNo string

	// Number of successful SMS submission
	SuccessCount int
}

// NewSendBatchUSMSMessageRequest will create request of SendBatchUSMSMessage action.
func (c *USMSClient) NewSendBatchUSMSMessageRequest() *SendBatchUSMSMessageRequest {
	req := &SendBatchUSMSMessageRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(false)
	return req
}

/*
API: SendBatchUSMSMessage
*/
func (c *USMSClient) SendBatchUSMSMessage(req *SendBatchUSMSMessageRequest) (*SendBatchUSMSMessageResponse, error) {
	var err error
	var res SendBatchUSMSMessageResponse

	reqCopier := *req

	err = c.Client.InvokeAction("SendBatchUSMSMessage", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}

// UpdateUSMSTemplateRequest is request schema for UpdateUSMSTemplate action
type UpdateUSMSTemplateRequest struct {
	request.CommonBase

	// [PublicParam] Project ID.
	AccountId *int `required:"true"`

	// SMS template application reason explanation
	Remark *string `required:"false"`

	// New template content
	Template *string `required:"true"`

	// SMS Template ID
	TemplateId *string `required:"true"`

	// New template name.
	TemplateName *string `required:"false"`
}

// UpdateUSMSTemplateResponse is response schema for UpdateUSMSTemplate action
type UpdateUSMSTemplateResponse struct {
	response.CommonBase

	// Error description when error occurs
	Message string
}

// NewUpdateUSMSTemplateRequest will create request of UpdateUSMSTemplate action.
func (c *USMSClient) NewUpdateUSMSTemplateRequest() *UpdateUSMSTemplateRequest {
	req := &UpdateUSMSTemplateRequest{}

	// setup request with client config
	c.Client.SetupRequest(req)

	// setup retryable with default retry policy (retry for non-create action and common error)
	req.SetRetryable(true)
	return req
}

/*
API: UpdateUSMSTemplate
*/
func (c *USMSClient) UpdateUSMSTemplate(req *UpdateUSMSTemplateRequest) (*UpdateUSMSTemplateResponse, error) {
	var err error
	var res UpdateUSMSTemplateResponse

	reqCopier := *req

	err = c.Client.InvokeAction("UpdateUSMSTemplate", &reqCopier, &res)
	if err != nil {
		return &res, err
	}

	return &res, nil
}
